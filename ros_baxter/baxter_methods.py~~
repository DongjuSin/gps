# Importing Baxter stuff:
#!/usr/bin/env python
import argparse
import random
import sys

sys.path.append("/home/baxter/ros_ws_sim/src/baxter_pykdl")

import rospy
import roslib; roslib.load_manifest('gps_agent_pkg')

import baxter_interface
import baxter_external_devices

from baxter_interface import CHECK_VERSION
from baxter_pykdl import baxter_kinematics

##
import cv2
import cv_bridge
from sensor_msgs.msg import Image
import numpy as np
import matplotlib.pyplot as plt

from geometry_msgs.msg import (
    Point,
    Quaternion,
)
import ik_solver

import pprint
import pickle
import time
##


# Proposed joint name order of joint commands coming from the policy... not sure if this matters.
#baxter_joint_name_list = ['right_e0','right_s0','right_s1','right_w0','right_e1','right_w1','right_w2']
baxter_joint_name_list = ['right_s0', 'right_s1', 'right_e0', 'right_e1', 'right_w0', 'right_w1', 'right_w2']

class BaxterMethods:

    def __init__(self):
        self.use_camera = False
        self.isOpen = False
        #self._setup_baxter_world()
        ##
        #self.left_limb = baxter_interface.Limb('left')
        ##
        #self.limb = baxter_interface.Limb('right')
        #self.kin = baxter_kinematics('right')
        
    def _setup_baxter_world(self):
        print("Initializing node... ")
        #rospy.init_node("rsdk_joint_position_keyboard")
        rospy.init_node("baxter_world_node")
        print("Getting robot state... ")
        rs = baxter_interface.RobotEnable(CHECK_VERSION)
        init_state = rs.state().enabled

        def clean_shutdown():
            print("\nExiting example...")
            if not init_state:
                print("Disabling robot...")
                rs.disable()
        rospy.on_shutdown(clean_shutdown)

        print("Enabling robot... ")
        rs.enable()
        
        self.limb = baxter_interface.Limb('right')
        self.kin = baxter_kinematics('right')

        # map_keyboard()
        print("Done.")

    def _setup_baxter_camera(self):
        #baxter_interface.CameraController('head_camera').close()
        self.camera = baxter_interface.CameraController('left_hand_camera')
        self.camera_image = None
        #self._open_camera()

        line = (0.81, 0.49, 0.31)
        orient = (0.07919578493446663, 0.9686879285325529, -0.21512379373111565, 0.09535973015197662)
        self._move_to(line, orient)

    def set_baxter_joint_angles(self, joint_angles_list):
        if len(joint_angles_list) != 7:
            print "The number of joint angles passed to baxter are: " + str(len(joint_angles_list))
        #self.limb.set_joint_positions(baxter_list_to_dict(joint_angles_list),True)
	    #self.limb.move_to_joint_positions(joint_dict)
        print "joint_angles_list: ", baxter_list_to_dict(joint_angles_list)
        self.limb.move_to_joint_positions(baxter_list_to_dict(joint_angles_list), True)

    def set_baxter_joint_velocities(self, joint_angles_list):
        if len(joint_angles_list) != 7:
            print "The number of joint angles passed to baxter are: " + str(len(joint_angles_list))
        self.limb.set_joint_velocities(baxter_list_to_dict(joint_angles_list))

    def set_baxter_joint_positions(self, joint_angles_list):
        joint_dict = baxter_list_to_dict(joint_angles_list)
        self.limb.move_to_joint_positions(joint_dict)

    ##
    def move_baxter_to_joint_positions(self, joint_angles_list):
        if len(joint_angles_list) != 7:
            print "The number of joint angles passed to baxter are: " + str(len(joint_angles_list))
        self.limb.move_to_joint_positions(baxter_list_to_dict(joint_angles_list))    
    
    def set_baxter_joint_torques(self, torque):
        if len(torque) != 7:
            print "The number of joint torques passed to baxter are: " + str(len(torque))
        self.limb.set_joint_torques(baxter_list_to_dict(torque))
    ##

    def get_baxter_joint_angles_positions(self):
        observed_joint_angles_dict = self.limb.joint_angles()
        if len(observed_joint_angles_dict) != 7:
            print "The number of joint angles taken from baxter are: " + str(len(observed_joint_angles_dict))
        return baxter_dict_to_list(observed_joint_angles_dict)

    def get_baxter_joint_angles_velocities(self):
        observed_joint_velocities_dict = self.limb.joint_velocities()
        if len(observed_joint_velocities_dict) != 7:
            print "The number of joint angles taken from baxter are: " + str(len(observed_joint_velocities_dict))
        return baxter_dict_to_list(observed_joint_velocities_dict)

    def get_baxter_end_effector_pose(self):
        pose = self.limb.endpoint_pose()
        
	#print ('The pose is:' + repr(pose))
	#print ('The pose[position] is:' + repr(pose['position']))
	return list(pose['position'])  + [0]*3 #+ list(pose['orientation'])[:3]
	#return list(pose['position']) #+ list(pose['orientation'])[:3]

    def get_baxter_end_effector_velocity(self):
        pose = self.limb.endpoint_velocity()
        return list(pose['linear']) + list(pose['angular'])

    def get_baxter_end_effector_jacobian(self):
        return self.kin.jacobian()

    def _point2angles(self, line, orient):
        loc = Point(line[0], line[1], line[2])
        orient = Quaternion(orient[0], orient[1], orient[2], orient[3])

        limb_joints = ik_solver.ik_solve('left', loc, orient)

        return limb_joints, loc

    def _move_to(self, _line, _orient):
        lcmd, loc = self._point2angles(_line, _orient)
        baxter_interface.Limb('left').move_to_joint_positions(lcmd)

    def _open_camera(self):
        ## MAYBE NEED TO ADD CAMERA & IMAGE INFO.
        #self.camera = baxter_interface.CameraController('left_hand_camera')
        self.camera.resolution = (320, 200)
        self.camera.fps = 120
        self.camera.open()
        #self.camera_image = None
        self.isOpen = True

    def get_img(self, msg):
        self.camera_image = cv_bridge.CvBridge().imgmsg_to_cv2(msg, desired_encoding='rgb8')

    def get_baxter_camera_image(self):
        self.camera_image = None
        while type(self.camera_image) == type(None):
            self.camera_subscriber = rospy.Subscriber('cameras/left_hand_camera/image', Image, self.get_img)
            print("get image...")
            continue
        self.camera_image = np.array(self.camera_image, dtype=np.float32)
        self.camera_subscriber.unregister()
        ##
        #pickle.dump(self.camera_image, open("pickled_image.pkl", "wb"))
        #time.sleep(0.5)
        pprint.pprint (self.camera_image)
        im = plt.imshow(self.camera_image)
        #time.sleep(0.5)
        #plt.show()
        
        return self.camera_image

    def get_baxter_camera_open(self):
        #self.camera = baxter_interface.CameraController('left_hand_camera')
        self.camera_image = None
        #self._open_camera()

        if not self.isOpen:
            #self._setup_baxter_camera()
            self.camera.resolution = (320, 200)
            self.camera.fps = 120
            self.camera.open()
            #self.camera_image = None
            self.isOpen = True
            
            line = (0.81, 0.49, 0.31)
            orient = (0.07919578493446663, 0.9686879285325529, -0.21512379373111565, 0.09535973015197662)
            self._move_to(line, orient)
            print "\n\n\nCamera Opened \n\n"

    def get_baxter_camera_close(self):
        self.camera.close()
        #baxter_interface.CameraController('right_hand_camera').close()
        #baxter_interface.CameraController('left_hand_camera').close()
        self.isOpen = False
        print "\n\n\nCamera Closed \n\n"

def baxter_dict_to_list(dictionary):
    joint_list = []
    for i in range(len(baxter_joint_name_list)):
        joint_list.append(dictionary[baxter_joint_name_list[i]])
    return joint_list

def baxter_list_to_dict(joint_list):
    joint_dict = {}
    for i in range(len(joint_list)):
        joint_dict[baxter_joint_name_list[i]] = joint_list[i]
    return joint_dict
